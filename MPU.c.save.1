#include <linux/init.h>
#include <linux/module.h>
#include <linux/i2c.h>
#include <linux/uaccess.h>
#include <linux/pm.h>
#include <linux/input-polldev.h>
#include <linux/dcache.h>
#include <linux/device.h>
#include <linux/pm_runtime.h>
#include <linux/debugfs.h>
#include <linux/delay.h>
#include <linux/types.h>
#include <linux/kdev_t.h>
#include <linux/fs.h>
#include <linux/cdev.h>

dev_t deviceno;
struct class *MPU6050_class;
struct device *MPU6050_device;
//device specific structure//

MODULE_LICENSE("GPL");

struct MPU6050_dev
{
	struct i2c_client *client;
	struct cdev cdev;
	struct kobject *kobj_conf_dir;
};


// open
int MPU6050_open (struct inode *inode, struct file *filep)
{
	struct MPU6050_dev *dev = filep->private_data = container_of(inode->i_cdev,struct MPU6050_dev,cdev);
//	struct i2c_client *client = dev->client;
	printk( "Open function called");
//	retval = pm_runtime_get_sync(&client->dev); //power on the device
//	if (retval < 0)
//		return retval;
	return 0;
}


// close
int MPU6050_close(struct inode *inode, struct file *filep)
{

printk("\ncloesing file");


	struct MPU6050_dev *dev = filep->private_data;
//	struct i2c_client *client = dev->client;
	printk("\nClose function called");
	return 0;
}


//write
ssize_t MPU6050_write (struct file *filep, const char __user *ubuff, size_t cnt, loff_t *off)
{

/*	char data[15];
        u8 i=0;
        u8 comand=0x3B;
        struct MPU6050_dev *dev = filep->private_data;
        struct i2c_client *client = dev->client;
        dev_info(&client->dev, "Write function called");
//      i2c_smbus_write_byte_data ( client,107,0x40);
//        mdelay(15);

        while(i<15)
        {
        data[i]=i2c_smbus_read_byte_data (client,comand++);
        mdelay(15);
       printk("data at %d-%d\n",i,data[i]);
        i++;
        }*/
return 0;
}


//read
ssize_t MPU6050_read (struct file *filep, char __user *ubuff, size_t cnt, loff_t *off)
{
	char data[32]={0};

	u8 i=0;
	u8 rd1,rd2;
	u8 comand=0x3B;
	struct MPU6050_dev *dev = filep->private_data;
   	struct i2c_client *client = dev->client;
	i2c_smbus_write_byte_data ( client,0x6B,0x20);
	dev_info(&client->dev, "\nraed function");
	rd1=i2c_smbus_read_byte_data (client,0x6B);
	printk("\npower managment resistor %u",rd);
	rd2=i2c_smbus_read_byte_data (client,0x6B);
        printk("\npower managment resistor %u",rd);
	 rd=i2c_smbus_read_byte_data (client,0x75);
       // dev_info(&client->dev, "Added cdev Structure\n");
	 printk("\npower managment resistor %u",rd);

//	i2c_smbus_write_byte_data ( client,107,0x40);
//        mdelay(15);
	i2c_smbus_read_block_data (client,0x3B, data);

        while(i<15)
        {
 //       data[i]=i2c_smbus_read_byte_data (client,comand++);
  //      mdelay(15);
        printk("data at %d-%d\n",i,data[i]);
        i++;
        }

return 0;
}

/*  ID table */
static struct i2c_device_id MPU6050_id[] = {
		{"MPU6050", 0}
};


static const struct file_operations MPU6050_fops = {
                .open                   = MPU6050_open,
          //      .write                  = MPU6050_write,
                .read                   = MPU6050_read,
                .release                = MPU6050_close,
        //      .unlocked_ioctl = MPU6050_ioctl

};




int MPU6050_probe(struct i2c_client *client, const struct i2c_device_id *id)
{

	printk("\n in probe function");
	char wmi;
        u8 retval;
        u8 i=0;
	struct MPU6050_dev *dev;
        char data[32];
        u8 comand=0x3B;
//	struct device *MPU6050_device;
	
	dev_info(&client->dev, "MPU6050 device probed");

	dev = devm_kzalloc(&client->dev, sizeof(*dev), GFP_KERNEL);
	if (!dev)
	{
		dev_err(&client->dev, "Failed to allocate memory for private data\n");
		return -ENOMEM;
	}
	dev_info(&client->dev, "Allocated memory for private data\n");

	i2c_set_clientdata(client, dev);
	dev->client = client;

	cdev_init(&dev->cdev,&MPU6050_fops);

        retval=cdev_add(&dev->cdev,deviceno,1);
	if (retval)
	{
		dev_err(&client->dev, "Cdev_Add Failed");
		goto cdev_init_fail;
	}
	dev_info(&client->dev, "Added cdev Structure\n");
	MPU6050_device= device_create(MPU6050_class,NULL,deviceno,NULL,"MPU6050");
	if (MPU6050_device==NULL)
	{
		dev_err(&client->dev, "Failed to create ddvice");
		goto device_register_fail;
	}
	dev_info(&client->dev, "Device created\n");

	
        i2c_smbus_write_byte_data ( client,0x6B,0x80);
        mdelay(15);
	wmi=i2c_smbus_read_byte_data (client,0x75);
	printk("\nWHO M I=%u",wmi);
	i2c_smbus_read_block_data (client,0x3B, data);
        while(i<15)
	{
//	data[i]=i2c_smbus_read_byte_data (client,comand++);
//	mdelay(15);
       printk("data at %d-%d\n",i,data[i]);
	i++;
	}
       //  ret=MPU6050_init_acc(dev);
	return 0;

	device_register_fail:
		cdev_del(&dev->cdev);
	cdev_init_fail:
		return retval;


	return 0;
}


int MPU6050_remove(struct i2c_client *client)
{

return 0;
}

static struct i2c_driver MPU6050_driver = {
                .driver         = {
                                .name   = "MPU6050",
//                                .pm     = &MPU6050_pm
                },
                .probe          = MPU6050_probe,
                .remove         = MPU6050_remove,
                .id_table       = MPU6050_id,

};


//init function
static int __init MPU6050_Final_init(void)
{
	int ret;
	printk("INIT FUNCTION\n");
	alloc_chrdev_region(&deviceno,0,1,"MPU6050");
	
	MPU6050_class= class_create(THIS_MODULE,"MPU6050");
	ret = i2c_add_driver(&MPU6050_driver);
       	if (ret)
	{
		printk("Failed to add the i2c driver\n");
		return ret;
	}
	printk("I2C driver added\n");
	return 0; 

}


//exit function
static void  __exit MPU6050_Final_exit(void)
{
	printk("EXIT\n");
	i2c_del_driver(&MPU6050_driver);
	printk("I2C driver deleted\n");
	class_destroy(MPU6050_class);
	printk("Class destroyed\n");
	unregister_chrdev_region(deviceno,1);
	printk("Unregistered Char Device\n");
}

module_init(MPU6050_Final_init);
module_exit(MPU6050_Final_exit);
